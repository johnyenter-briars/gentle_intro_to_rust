#[derive(Debug)]
struct A<'a> { 
	s: &'a str //'a means "the lifetime of this reference is at least as long as the lifetime of the struct itself"
}
//a borrws from s, and cannot outlive it

//this wont work - cause string will be dropped once the function ends, but the returned struct outlives its reference
fn makes_a() -> A<'static> {
	let string = "i was generated by makes_a".to_string();
	A { s: &string }
}


fn main() {
	let string = "im a little string".to_string();

	let a = A { s: &string};

	println!("{:?}", a);	

	let a = makes_a();

	println!("{:?}", a);	
}